Microsoft (R) Macro Assembler Version 6.11		    05/05/20 22:31:00
tempfile.asm						     Page 1 - 1


				enterline macro		;定义回车换行的宏指令
					mov dl,13
					mov ah,2
					int 21h
					mov dl,10
					mov ah,2
					int 21h
				endm
				;----------------------------------------------------------------------------------

				ascnum macro err,buf,result
					LOCAL star,cov,error,stop,output,hhh
					push ax
					push bx
					push cx
					push dx	
					push si
					push di
				star: 
				    lea dx,buf		;从键盘接收输入数值放入buf缓冲区
				    mov ah,10
				    int 21h
				    
				    enterline		;回车换行
				    mov cl,buf+1	;获取实际键入字符数，置于CX寄存器中
				    xor ch,ch
				    
				    lea si,buf+2	;将si指向接收到的第1个字符位置
				    add si,cx		;因为从个位算起，所以将si指向最后1个接收到的个位数
				    dec si          ;最后一个键入的字符是回车，往前移动1位
				    mov bp,0
				    
				cov: xor di,di		;累加器清0
				    
				    xor dx,dx		;DX寄存器清0
				    
				    mov bx,1		;由于从个位数开始算起，因而将所乘权值设为1
				    
				    
				    
				hhh:
					mov al,[si]		;取出个位数给al
					cmp al,20h      ;判断是不是空格
					jz output       ;如果是空格就
					cmp al,'0'		;边界检查：如果输入不是0-9的数字，就报错
					jb error
					cmp al,'9'
					ja error

					
					
				    sub al,30h		;将al中的ascii码转为数字
				    xor ah,ah
				    mul bx			;乘以所处数位的权值
				    cmp dx,0		;判断结果是否超出16位数范围，如超出则报错
				    jne error
				    
				    add di,ax		;将形成的数值放在累加器di中
				    
				    
				    jc error		;如数值超过16位数范围报错
				    
				        
				    mov ax,bx		;将BX中的数位权值乘以10
				    mov bx,10
				    mul bx
				    mov bx,ax
				    
				    dec si			;si指针减1，指向前一数位
				    
				    lea cx,buf+2    ;cx是最高位的地址
				    cmp si,cx
				    jae hhh         ;当si高于或等于cx时跳转回到hhh
				    ;jmp hhh    	;按CX中的字符个数计数循环
				   
				output:   	
					mov ax,di		;将最终转换结果从di中放置到ax
				   	
				   	mov result[bp],ax       ;bp相当于是偏移量
				   	add bp,2
				   	dec si
				   	lea cx,buf+2
				    cmp si,cx      ;判断是是不是检测到输入数的最高位
				    jb stop        ;jb：低于或不高于。如果已经到最高位，就输出
				    jmp cov        ;否则就将寄存器累加器权值都清空 重新存贮下一个数字

				error:				;给出错误提示
					lea dx,err
				    mov ah,9
				    int 21h
				    enterline 
				    
				    jmp star 		;如出错则返回起始点重新输入  
				        
				stop:
				   pop di
				   pop si
				   pop dx
				   pop cx
				   pop bx
				   pop ax
				   
				endm
				;-------------------------------------------------------------------------

				;实现冒泡排序，并将排序后的数输出
 0000				DATAS SEGMENT
 0000  000A [			   A dw 10 dup(?);;;;;题目要求多少个数字就输入几个问号
        0000
       ]
 0014 = 0014			   N=$-A 			;计算数字所占的字节数
 0014 45 52 52 4F 52 24		   err db 'ERROR$'
 001A 32 00			   num db 50,?,20 dup(?)  ;因为num是20位的，所以连回车在内最多可以键入10个字符
       0014 [
        00
       ]
 0030				DATAS ENDS

 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS
 0000  B8 ---- R		START:MOV AX,DATAS
 0003  8E D8			      MOV DS,AX
				      
				      ascnum err,num,A  ;输入
 0005  50		     1		push ax
 0006  53		     1		push bx
 0007  51		     1		push cx
 0008  52		     1		push dx	
 0009  56		     1		push si
 000A  57		     1		push di
 000B			     1	??0000: 
 000B  8D 16 001A R	     1	    lea dx,num		;从键盘接收输入数值放入buf缓冲区
 000F  B4 0A		     1	    mov ah,10
 0011  CD 21		     1	    int 21h
 0013  B2 0D		     2		mov dl,13
 0015  B4 02		     2		mov ah,2
 0017  CD 21		     2		int 21h
 0019  B2 0A		     2		mov dl,10
 001B  B4 02		     2		mov ah,2
 001D  CD 21		     2		int 21h
 001F  8A 0E 001B R	     1	    mov cl,num+1	;获取实际键入字符数，置于CX寄存器中
 0023  32 ED		     1	    xor ch,ch
 0025  8D 36 001C R	     1	    lea si,num+2	;将si指向接收到的第1个字符位置
 0029  03 F1		     1	    add si,cx		;因为从个位算起，所以将si指向最后1个接收到的个位数
 002B  4E		     1	    dec si          ;最后一个键入的字符是回车，往前移动1位
 002C  BD 0000		     1	    mov bp,0
 002F  33 FF		     1	??0001: xor di,di		;累加器清0
 0031  33 D2		     1	    xor dx,dx		;DX寄存器清0
 0033  BB 0001		     1	    mov bx,1		;由于从个位数开始算起，因而将所乘权值设为1
 0036			     1	??0005:
 0036  8A 04		     1		mov al,[si]		;取出个位数给al
 0038  3C 20		     1		cmp al,20h      ;判断是不是空格
 003A  74 29		     1		jz ??0004       ;如果是空格就
 003C  3C 30		     1		cmp al,'0'		;边界检查：如果输入不是0-9的数字，就报错
 003E  72 3A		     1		jb ??0002
 0040  3C 39		     1		cmp al,'9'
 0042  77 36		     1		ja ??0002
 0044  2C 30		     1	    sub al,30h		;将al中的ascii码转为数字
 0046  32 E4		     1	    xor ah,ah
 0048  F7 E3		     1	    mul bx			;乘以所处数位的权值
 004A  83 FA 00		     1	    cmp dx,0		;判断结果是否超出16位数范围，如超出则报错
 004D  75 2B		     1	    jne ??0002
 004F  03 F8		     1	    add di,ax		;将形成的数值放在累加器di中
 0051  72 27		     1	    jc ??0002		;如数值超过16位数范围报错
 0053  8B C3		     1	    mov ax,bx		;将BX中的数位权值乘以10
 0055  BB 000A		     1	    mov bx,10
 0058  F7 E3		     1	    mul bx
 005A  8B D8		     1	    mov bx,ax
 005C  4E		     1	    dec si			;si指针减1，指向前一数位
 005D  8D 0E 001C R	     1	    lea cx,num+2    ;cx是最高位的地址
 0061  3B F1		     1	    cmp si,cx
 0063  73 D1		     1	    jae ??0005         ;当si高于或等于cx时跳转回到hhh
 0065			     1	??0004:   	
 0065  8B C7		     1		mov ax,di		;将最终转换结果从di中放置到ax
 0067  3E: 89 86 0000 R	     1	   	mov A[bp],ax       ;bp相当于是偏移量
 006C  83 C5 02		     1	   	add bp,2
 006F  4E		     1	   	dec si
 0070  8D 0E 001C R	     1	   	lea cx,num+2
 0074  3B F1		     1	    cmp si,cx      ;判断是是不是检测到输入数的最高位
 0076  72 19		     1	    jb ??0003        ;jb：低于或不高于。如果已经到最高位，就输出
 0078  EB B5		     1	    jmp ??0001        ;否则就将寄存器累加器权值都清空 重新存贮下一个数字
 007A			     1	??0002:				;给出错误提示
 007A  8D 16 0014 R	     1		lea dx,err
 007E  B4 09		     1	    mov ah,9
 0080  CD 21		     1	    int 21h
 0082  B2 0D		     2		mov dl,13
 0084  B4 02		     2		mov ah,2
 0086  CD 21		     2		int 21h
 0088  B2 0A		     2		mov dl,10
 008A  B4 02		     2		mov ah,2
 008C  CD 21		     2		int 21h
 008E  E9 FF7A		     1	    jmp ??0000 		;如出错则返回起始点重新输入  
 0091			     1	??0003:
 0091  5F		     1	   pop di
 0092  5E		     1	   pop si
 0093  5A		     1	   pop dx
 0094  59		     1	   pop cx
 0095  5B		     1	   pop bx
 0096  58		     1	   pop ax
				      
 0097  BE 0000			      MOV SI,0		;SI遍历数字;前一个数的地址
 009A  B9 0009			      MOV CX,N/2-1	;设置循环次数，M(M=N/2)个数需要，循环M-1次
 009D  E8 0022			      CALL BUBBLE	;调用BUBBLE将原来的数排序
					  ;输出排序后的数    
 00A0  B9 000A			      MOV CX,N/2	;循环M次输出排序后的M个数
 00A3  BE 0000			      MOV SI,0		;SI遍历排序后的数 
 00A6  BF 0000			      MOV DI,0    	;用DI记录数字的位数
 00A9  BD 0019			      MOV BP,N+5	;用于遍历存储的转化后的字符的位置
 00AC  51			SHOW: PUSH CX		;循环次数入栈
 00AD  BA 0000			      MOV DX,0		;由于将要进行16位除需要置高16位为0
 00B0  8B 04				  MOV AX,[SI]   ;低16位为排序后的数
 00B2  E8 002D				  CALL DTOC		;调用DTOC将十进制数转换为字符串
 00B5  E8 0055				  CALL SHOW_STR ;调用SHOW_STR将一个数转化得到的字符串输出
 00B8  83 C6 02				  ADD SI,2		;下一个数
 00BB  59				  POP CX		;循环次数出栈栈
 00BC  E2 EE				  LOOP SHOW   
				            
 00BE  B4 4C			    MOV AH,4CH
 00C0  CD 21			    INT 21H
				    
 00C2				BUBBLE PROC
 00C2  51			L1:	PUSH CX			;将循环次数入栈
 00C3  8D 36 0000 R			LEA SI,A		;SI遍历DATAS数据段的数字
 00C7  8B 84 0000 R		L2: MOV AX,A[SI]	;将前一个数存于AX
 00CB  3B 84 0002 R			CMP AX,A[SI+2]	;比较前后两个数
 00CF  76 08				JBE NEXT		;如果前一个数小于或等于后一个数则继续本轮的比较
 00D1  87 84 0002 R			XCHG AX,A[SI+2]	;否则，交换前后两个数的位置
 00D5  89 84 0000 R			MOV A[SI],AX
 00D9  83 C6 02			NEXT:ADD SI,2		;下一个数
 00DC  E2 E9				 LOOP L2		;注意内层循环的次数已经确定了
 00DE  59				 POP CX			;将循环次数出栈
 00DF  E2 E1				 LOOP L1		;下一轮比较
 00E1  C3				 RET
 00E2				BUBBLE ENDP
				;将十进制数转换为字符串并储存起来
 00E2				DTOC PROC
 00E2  B9 000A			  S:MOV CX,10       ;将除数10，放入CX中   
 00E5  E8 0013			    CALL DIVDW 		;调用DIVDW程序
 00E8  80 C1 30			    ADD CL,30H 		;把数字转换为ASCII码，这样就能显示了
 00EB  3E: 88 4E 00		    MOV DS:[BP],CL  ;把ASCII码放到内存中 
 00EF  47			    INC DI			;用DI记录循环的次数
 00F0  50			    PUSH AX    		;将低16位入栈
 00F1  03 C2			    ADD AX,DX  		;将高位与低位相加，接着判断是否已经除尽  
 00F3  74 04			    JZ BACK   		;除尽后返回调用处 
 00F5  58			    POP AX			;将低16位出栈
 00F6  4D			    DEC BP		    ;逆序存放转化后的字符，便于主程序调用SHOW_STR
 00F7  EB E9			    JMP S  
 00F9  58			BACK:POP AX         ;为了得到正确的IP值，需要出栈一次
 00FA  C3			     RET 
 00FB				DTOC ENDP

				;子程序定义开始,功能是分离被除数的各个位的数字
				;公式：X/N=int(H/N)*65536+[rem(H/N)*65536+L]/N   
 00FB				DIVDW PROC
 00FB  50			 	PUSH AX   		;低16位入栈
 00FC  8B C2			    MOV AX,DX   	;将高16位写入AX,
 00FE  BA 0000			    MOV DX,0  		;将高16位置零
 0101  F7 F1			    DIV CX    		;将新的数除10,
 0103  8B D8			    MOV BX,AX 		;将商int(H/N)转移到BX，默认余数rem(H/N)在DX
 0105  58			    POP AX    		;将低16位出栈，
 0106  F7 F1			    DIV CX          ;将[rem(H/N)*65536+L]除10,默认余数在DX
 0108  8B CA			    MOV CX,DX       ;将余数转移到CX
 010A  8B D3			    MOV DX,BX       ;将商int(H/N)转移到dx,相当于int(H/N)*65536
 010C  C3			    RET             ;子程序定义结束       
 010D				DIVDW ENDP
				        
				;实现字符串的输出        
 010D				SHOW_STR PROC
 010D  B4 02			S2:MOV AH,2			;输出数字转化后的字符串
 010F  3E: 8A 56 00		   MOV DL,DS:[BP]
 0113  CD 21			   INT 21H
 0115  45			   INC BP			;顺序输出
 0116  4F			   DEC DI			;数字的位数减一
 0117  74 02			   JZ OK			;字符串输出完了就结束
 0119  EB F2			   JMP S2			;否则继续输出
 011B  B4 02			OK:MOV AH,2		    ;输出空格
 011D  B2 00			   MOV DL,0
 011F  CD 21			   INT 21H
 0121  C3			   RET		
 0122				SHOW_STR ENDP    
				         
 0122				CODES ENDS
				    END START














Microsoft (R) Macro Assembler Version 6.11		    05/05/20 22:31:00
tempfile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

ascnum . . . . . . . . . . . . .	Proc
enterline  . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 0122	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0030	  Para	  Private 


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

BUBBLE . . . . . . . . . . . . .	P Near	 00C2	  CODES	Length= 0020 Public
  L1 . . . . . . . . . . . . . .	L Near	 00C2	  CODES	
  L2 . . . . . . . . . . . . . .	L Near	 00C7	  CODES	
  NEXT . . . . . . . . . . . . .	L Near	 00D9	  CODES	
DIVDW  . . . . . . . . . . . . .	P Near	 00FB	  CODES	Length= 0012 Public
DTOC . . . . . . . . . . . . . .	P Near	 00E2	  CODES	Length= 0019 Public
  S  . . . . . . . . . . . . . .	L Near	 00E2	  CODES	
  BACK . . . . . . . . . . . . .	L Near	 00F9	  CODES	
SHOW_STR . . . . . . . . . . . .	P Near	 010D	  CODES	Length= 0015 Public
  S2 . . . . . . . . . . . . . .	L Near	 010D	  CODES	
  OK . . . . . . . . . . . . . .	L Near	 011B	  CODES	


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	L Near	 000B	  CODES	
??0001 . . . . . . . . . . . . .	L Near	 002F	  CODES	
??0002 . . . . . . . . . . . . .	L Near	 007A	  CODES	
??0003 . . . . . . . . . . . . .	L Near	 0091	  CODES	
??0004 . . . . . . . . . . . . .	L Near	 0065	  CODES	
??0005 . . . . . . . . . . . . .	L Near	 0036	  CODES	
A  . . . . . . . . . . . . . . .	Word	 0000	  DATAS	
N  . . . . . . . . . . . . . . .	Number	 0014h	 
SHOW . . . . . . . . . . . . . .	L Near	 00AC	  CODES	
START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
err  . . . . . . . . . . . . . .	Byte	 0014	  DATAS	
num  . . . . . . . . . . . . . .	Byte	 001A	  DATAS	

	   0 Warnings
	   0 Errors
