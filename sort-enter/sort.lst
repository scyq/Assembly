Microsoft (R) Macro Assembler Version 6.11		    05/05/20 22:07:20
tempfile.asm						     Page 1 - 1


				enterline macro
					mov dl,10
					mov ah,02
					int 21h
				endm

 0000				DATAS SEGMENT
 0000 0A 00				buf db 10,?,10 dup(0)
       000A [
        00
       ]
 000C  000A [			    numbers dw 10 dup(?)		; changable
        0000
       ]
 0020 59 6F 75 72 20 49		    wrong db 'Your Input is not legal$'
       6E 70 75 74 20 69
       73 20 6E 6F 74 20
       6C 65 67 61 6C 24
 0038 00			    flag db 0
 0039				DATAS ENDS

 0000				STACKS SEGMENT stack
 0000  0100 [				dw 256 dup(?)
        0000
       ]
 0200				STACKS ENDS

 0000				CODES SEGMENT
				    ASSUME CS:CODES,DS:DATAS,SS:STACKS
 0000				START:
 0000  B8 ---- R		    MOV AX,DATAS
 0003  8E D8			    MOV DS,AX
				    
 0005  33 F6			    xor si,si
 0007  33 FF			    xor di,di

 0009				input:
 0009  B9 000A				mov cx,10			; changable
 000C				inL:
 000C  33 C0				xor ax,ax
 000E  51				push cx
 000F  56				push si
 0010  E8 0053				call ascToNum
 0013  5E				pop si
 0014  89 84 000C R			mov numbers[si],ax
 0018  83 C6 02				add si,2			; db, +2
					enterline
 001B  B2 0A		     1		mov dl,10
 001D  B4 02		     1		mov ah,02
 001F  CD 21		     1		int 21h
 0021  59			    pop cx
 0022  E2 E8			loop inL
				    
 0024  B9 0009				mov cx,9			; bubble sort times
 0027				csi:
 0027  33 FF				xor di,di
 0029  33 F6				xor si,si
 002B				bubble:
 002B  33 C0				xor ax,ax
 002D  33 DB				xor bx,bx
 002F  8B 84 000C R			mov ax,numbers[si]
 0033  8B 9C 000E R			mov bx,numbers[si+2]
 0037  3B C3				cmp ax,bx
					
					; compare ax bx
					; if ax < bx continue
					; else swap(ax, bx)
 0039  72 08				jb sorted
 003B  89 9C 000C R			mov numbers[si],bx
 003F  89 84 000E R			mov numbers[si+2],ax
					
 0043				sorted:
 0043  83 C6 02				add si,2
 0046  47				inc di
 0047  3B F9				cmp di,cx
					
					; 比较cx和di大小，di<cx转移
 0049  72 E0				jb bubble
 004B  E2 DA				loop csi
					
				; output
 004D  B9 000A				mov cx,10
 0050				output:
 0050  33 F6				xor si,si

 0052				os:
 0052  33 C0				xor ax,ax
 0054  8B 84 000C R			mov ax,numbers[si]
 0058  51				push cx
 0059  E8 006A				call numToAsc
 005C  59				pop cx
 005D  83 C6 02				add si,2
 0060  E2 F0				loop os
				    
				    
 0062  B4 4C			    MOV AH,4CH
 0064  CD 21			    INT 21H
				    
 0066				ascToNum proc	
 0066				again:
 0066  8D 16 0000 R			lea dx,buf		;从键盘接收输入数值放入buf缓冲区
 006A  B4 0A			    mov ah,10
 006C  CD 21			    int 21h
				    
 006E  8A 0E 0001 R		    mov cl,buf+1	;获取实际键入字符数，置于CX寄存器中
 0072  32 ED			    xor ch,ch
				    
 0074  33 FF			    xor di,di		;累加器清0
				    
 0076  33 D2			    xor dx,dx		;DX寄存器清0
				    
 0078  BB 0001			    mov bx,1		;由于从个位数开始算起，因而将所乘权值设为1
				    
 007B  8D 36 0002 R		    lea si,buf+2	;将si指向接收到的第1个字符位置
 007F  03 F1			    add si,cx		;因为从个位算起，所以将si指向最后1个接收到的个位数
 0081  4E			    dec si
				    
 0082				cov:
 0082  8A 04				mov al,[si]		;取出个位数给al
 0084  3C 30				cmp al,'0'		;边界检查：如果输入不是0-9的数字，就报错
 0086  72 2D				jb error
 0088  3C 39				cmp al,'9'
 008A  77 29				ja error

 008C  2C 30			    sub al,30h		;将al中的ascii码转为数字
 008E  32 E4			    xor ah,ah
 0090  F7 E3			    mul bx			;乘以所处数位的权值
 0092  83 FA 00			    cmp dx,0		;判断结果是否超出16位数范围，如超出则报错
 0095  75 1E			    jne error
				    
 0097  03 F8			    add di,ax		;将形成的数值放在累加器di中
 0099  72 1A			    jc error		;如数值超过16位数范围报错
				    
				      
 009B  8B C3			    mov ax,bx		;将BX中的数位权值乘以10
 009D  BB 000A			    mov bx,10
 00A0  F7 E3			    mul bx
 00A2  83 FA 00			    cmp dx,0		;判断结果是否超出16位数范围，如超出则报错
 00A5  75 09			    jne error1 
 00A7  8B D8			    mov bx,ax
				    
 00A9  4E			    dec si			;si指针减1，指向前一数位
 00AA  E2 D6			    loop cov    	;按CX中的字符个数计数循环
				   
 00AC				suc:
 00AC  8B C7				mov ax,di		;将最终转换结果从di中放置到ax中
 00AE  EB 15				jmp stop

 00B0				error1:
 00B0  83 F9 01				cmp cx,1
 00B3  76 F7				jbe suc
					
 00B5				error:				;给出错误提示
 00B5  8D 16 0020 R			lea dx,wrong
 00B9  B4 09			    mov ah,9
 00BB  CD 21			    int 21h
				    
				    enterline 
 00BD  B2 0A		     1		mov dl,10
 00BF  B4 02		     1		mov ah,02
 00C1  CD 21		     1		int 21h
				    
 00C3  EB A1			    jmp again 		;如出错则返回起始点重新输入

 00C5				stop:   
 00C5  C3				ret
 00C6				ascToNum endp

 00C6				numToAsc proc 
				    ;待转换数放置于AX寄存器中     
 00C6  BB 2710			    mov bx,10000		;初始数位权值为10000
				    
 00C9  33 D2			cov:xor dx,dx			;将dx:ax中的数值除以权值
 00CB  F7 F3				div bx
 00CD  8B CA				mov cx,dx			;余数备份到CX寄存器中
					
 00CF  80 3E 0038 R 00			cmp flag,0			;检测是否曾遇到非0商值
 00D4  75 05				jne nor1			;如遇到过，则不管商是否为0都输出显示
 00D6  83 F8 00				cmp ax,0			;如未遇到过，则检测商是否为0
 00D9  74 0E				je cont				;为0则不输出显示
					
 00DB				nor1:
 00DB  8A D0				mov dl,al			;将商转换为ascii码输出显示
 00DD  80 C2 30				add dl,30h
 00E0  B4 02				mov ah,2
 00E2  CD 21				int 21h
					
 00E4  C6 06 0038 R 01			mov flag,1			;曾遇到非0商，则将标志置1
					
 00E9				cont:
 00E9  83 FB 0A				cmp bx,10			;检测权值是否已经修改到十位了
 00EC  74 0F				je outer			;如果相等，则完成最后的个位数输出显示
					
 00EE  33 D2				xor dx,dx			;将数位权值除以10
 00F0  8B C3				mov ax,bx
 00F2  BB 000A				mov bx,10
 00F5  F7 F3			    div bx
 00F7  8B D8			    mov bx,ax
				    
 00F9  8B C1			    mov ax,cx			;将备份的余数送入AX
 00FB  EB CC			    jmp cov    			;继续循环
				   
 00FD				outer:
 00FD  8A D1				mov dl,cl			;最后的个位数变为ascii码输出显示
 00FF  80 C2 30				add dl,30h
 0102  B4 02				mov ah,2
 0104  CD 21				int 21h  

 0106				space:					;输出一个空格
 0106  B8 0020				mov ax,32 			;空格
 0109  8A D0				mov dl,al
 010B  B4 02				mov ah,2
 010D  CD 21				int 21h
 010F  C6 06 0038 R 00			mov flag,0			;还原，这样输出不会有前导0
 0114  C3				ret
 0115				numToAsc endp    
 0115				CODES ENDS
				    END START



Microsoft (R) Macro Assembler Version 6.11		    05/05/20 22:07:20
tempfile.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

enterline  . . . . . . . . . . .	Proc


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

CODES  . . . . . . . . . . . . .	16 Bit	 0115	  Para	  Private 
DATAS  . . . . . . . . . . . . .	16 Bit	 0039	  Para	  Private 
STACKS . . . . . . . . . . . . .	16 Bit	 0200	  Para	  Stack	  


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

ascToNum . . . . . . . . . . . .	P Near	 0066	  CODES	Length= 0060 Public
  again  . . . . . . . . . . . .	L Near	 0066	  CODES	
  cov  . . . . . . . . . . . . .	L Near	 0082	  CODES	
  suc  . . . . . . . . . . . . .	L Near	 00AC	  CODES	
  error1 . . . . . . . . . . . .	L Near	 00B0	  CODES	
  error  . . . . . . . . . . . .	L Near	 00B5	  CODES	
  stop . . . . . . . . . . . . .	L Near	 00C5	  CODES	
numToAsc . . . . . . . . . . . .	P Near	 00C6	  CODES	Length= 004F Public
  cov  . . . . . . . . . . . . .	L Near	 00C9	  CODES	
  nor1 . . . . . . . . . . . . .	L Near	 00DB	  CODES	
  cont . . . . . . . . . . . . .	L Near	 00E9	  CODES	
  outer  . . . . . . . . . . . .	L Near	 00FD	  CODES	
  space  . . . . . . . . . . . .	L Near	 0106	  CODES	


Symbols:

                N a m e                 Type     Value    Attr

START  . . . . . . . . . . . . .	L Near	 0000	  CODES	
bubble . . . . . . . . . . . . .	L Near	 002B	  CODES	
buf  . . . . . . . . . . . . . .	Byte	 0000	  DATAS	
csi  . . . . . . . . . . . . . .	L Near	 0027	  CODES	
flag . . . . . . . . . . . . . .	Byte	 0038	  DATAS	
inL  . . . . . . . . . . . . . .	L Near	 000C	  CODES	
input  . . . . . . . . . . . . .	L Near	 0009	  CODES	
numbers  . . . . . . . . . . . .	Word	 000C	  DATAS	
os . . . . . . . . . . . . . . .	L Near	 0052	  CODES	
output . . . . . . . . . . . . .	L Near	 0050	  CODES	
sorted . . . . . . . . . . . . .	L Near	 0043	  CODES	
wrong  . . . . . . . . . . . . .	Byte	 0020	  DATAS	

	   0 Warnings
	   0 Errors
